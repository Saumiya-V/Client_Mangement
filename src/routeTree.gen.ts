/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RolesRouteImport } from './routes/roles'
import { Route as PermissionsRouteImport } from './routes/permissions'
import { Route as FunctionalAreaRouteImport } from './routes/functionalArea'
import { Route as ClientsRouteImport } from './routes/clients'

const RolesRoute = RolesRouteImport.update({
  id: '/roles',
  path: '/roles',
  getParentRoute: () => rootRouteImport,
} as any)
const PermissionsRoute = PermissionsRouteImport.update({
  id: '/permissions',
  path: '/permissions',
  getParentRoute: () => rootRouteImport,
} as any)
const FunctionalAreaRoute = FunctionalAreaRouteImport.update({
  id: '/functionalArea',
  path: '/functionalArea',
  getParentRoute: () => rootRouteImport,
} as any)
const ClientsRoute = ClientsRouteImport.update({
  id: '/clients',
  path: '/clients',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/clients': typeof ClientsRoute
  '/functionalArea': typeof FunctionalAreaRoute
  '/permissions': typeof PermissionsRoute
  '/roles': typeof RolesRoute
}
export interface FileRoutesByTo {
  '/clients': typeof ClientsRoute
  '/functionalArea': typeof FunctionalAreaRoute
  '/permissions': typeof PermissionsRoute
  '/roles': typeof RolesRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/clients': typeof ClientsRoute
  '/functionalArea': typeof FunctionalAreaRoute
  '/permissions': typeof PermissionsRoute
  '/roles': typeof RolesRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/clients' | '/functionalArea' | '/permissions' | '/roles'
  fileRoutesByTo: FileRoutesByTo
  to: '/clients' | '/functionalArea' | '/permissions' | '/roles'
  id: '__root__' | '/clients' | '/functionalArea' | '/permissions' | '/roles'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ClientsRoute: typeof ClientsRoute
  FunctionalAreaRoute: typeof FunctionalAreaRoute
  PermissionsRoute: typeof PermissionsRoute
  RolesRoute: typeof RolesRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/roles': {
      id: '/roles'
      path: '/roles'
      fullPath: '/roles'
      preLoaderRoute: typeof RolesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/permissions': {
      id: '/permissions'
      path: '/permissions'
      fullPath: '/permissions'
      preLoaderRoute: typeof PermissionsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/functionalArea': {
      id: '/functionalArea'
      path: '/functionalArea'
      fullPath: '/functionalArea'
      preLoaderRoute: typeof FunctionalAreaRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/clients': {
      id: '/clients'
      path: '/clients'
      fullPath: '/clients'
      preLoaderRoute: typeof ClientsRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  ClientsRoute: ClientsRoute,
  FunctionalAreaRoute: FunctionalAreaRoute,
  PermissionsRoute: PermissionsRoute,
  RolesRoute: RolesRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
